# june

a compiler and vm for a small lisp implemented in c++

## example

    (define (fib n)
        (if (< n 2)
            1
            (+ (fib (- n 1)) (fib (- n 2)))))

a longer example demonstrating all language features found at `fib.lisp`

## prerequisites

bazel: https://bazel.build/install or `brew install bazel` on mac

## building

    bazel build //src:june

## usage

supports both interactive and batch execution:

    ./bazel-bin/src/june [file]

## status

under active development

## TODO

features:

- [x] booleans
- [x] integers
- [x] if
- [x] let
- [ ] define
- [ ] assert
- [ ] lists and cons car cdr nil nil?
- [ ] lambda and function calls
- [ ] arithmetic and logical built-ins
- [ ] garbage collection
- [ ] support compile-only and execute-only modes
- [ ] add disassembler

tech debt:

- refactor to std::variant
- clean up public interfaces
- error handling: move error factories out of classes
- error handling: use more diverse error types
- error handling: improve error propagation and use some exceptions
- error handling: better error messages when parsing exprs
- vm: keep values directly in the stack instead of unique_ptrs
- vm: move interactive mode setting to vm
- compiler/vm: standardize instruction argument passing
- compiler/vm: create instruction abstraction
- use std::span instead of std::vector parameters
- use more stl algorithms
- use C++20 concepts?
- add tests
- improve stack: https://www.craftinginterpreters.com/optimization.html
